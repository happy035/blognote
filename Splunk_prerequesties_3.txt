이번 글에서는 sourcetype에 대해서 자세히 알아보고 sourcetype을 새로 만드는 간단한 실습도 진행한다. 

sourcetype을 이해하기 전에 우선 Splunk가 로그를 수집하고 분류하는 방법을 간략하게 살펴보자. 
Splunk는 자동/수동으로 로그를 수집하면 이를 인덱싱해서 자체 포맷으로 저장한다. 이후 사용자는 Splunk가 제공하는 특별한 검색문법인 SPL(Search Processing Language)로 저장데이터를 검색한다. 
데이터베이스에서 사용하는 SQL문과 유사하지만 많은 차이가 있다. 검색 관련 각종 명령어는 이 블로그의 Splunk 검색 채널에서 다루고 있다.

sourcetype
sourcetype은 Splunk 검색에서도 중요한 부분을 차지한다. 앞서 sourcetype은 일종의 로그 파싱 규칙이라고 잠깐 언급했다. Splunk는 로그를 수집하고 분석하는 프로그램이다. 우리가 흔히 로그(log)라고 하는 일종의 기록은 사실은 전체를 의미하는 단어로 사용한다. 즉, 로그는 발생하는 기록을 한 줄 한 줄 지속적으로 기록한다. 이 기록을 로그라고 한다. 그렇다면 로그 한 줄을 의미하는 단어는 무엇일까? 컴퓨터 분야에서는 이벤트(Event)라는 용어를 사용한다. sourcetype은 이 이벤트가 어떻게 구성되어 있는지 알려주는 설명서 역할을 한다. 

다음과 같은 아파치 웹서버 로그를 살펴보자. (http://www.monitorware.com/en/logsamples/apache.php에서 예제로그로 가져왔다)

64.242.88.10 - - [07/Mar/2004:16:06:51 -0800] "GET /twiki/bin/rdiff/TWiki/NewUserTemplate?rev1=1.3&rev2=1.2 HTTP/1.1" 200 4523

이 로그는 아파치 웹서버 로그의 common 타입으로 저장되는 가장 범용적인 로그 형식이다. 로그는 공백으로 필드가 분리되어 있다. 표준 common타입을 보면 다음 형식을 갖추고 있다.

LogFormat "%h %l %u %t \"%r\" %>s %b" common

%h: 접속하는 클라이언트 IP 주소
%l: RFC1413을 활용하는 신원이다. 거의 사용하지 않는다. 
%u: HTTP 인증을 사용하는 경우 사용자 계정이다. 웹 어플리케이션에서 인증 페이지를 작성했으면 이 필드에 정보가 남지 않는다.
%t: 접속시간, 월/월/년:시:분:초 타임존으로 저장되고 있다.
%r: 요청내역으로 로그에는 사용한 HTTP 메소드와 요청하는 주소, HTTP 버전이 있다.
%>s: 서버가 클라이언트에게 보내는 상태 코드
%b: 헤더를 제외한 응답 내용의 크기

그러므로 아파치 이벤트는 이와 같은 형식으로 한줄 한줄 저장한다. Splunk도 이 내역을 동일하게 저장한다. 
하지만 테이블 스키마를 사용하는 데이터베이스는 이벤트를 테이블에 저장하기 전에 각 필드에 맞게 파싱한 다음에 테이블에 입력한다. Splunk는 데이터베이스와 다르게 이벤트를 통째로 저장한다.
저장한 단어에 대한 인덱싱을 일일히 만들기 때문에 Splunk에서는 원하는 단어만 입력해도 단어가 포함된 이벤트를 검색할 수 있다. 데이터베이스에서는 특정 단어가 어떤 필드에 있는지 반드시 지정해야 하지만 Splunk는 그렇지 않아도 되는 것이다.
이 때문에 Splunk 사용은 구글이나 네이버같은 검색엔진을 사용하는 것과 유사하다. 하지만 이는 심각한 단점을 내포하고 있다. 원하는 단어를 입력하고 검색하는 방식이 사용자에게는 편하게 보일지 몰라도 IT 담당자들에게는 그리 좋은 기법이 되지 않기 때문이다.
그 이유는 입력한 단어를 저장한 전체 문서에서 모두 검색하기 때문이다. 
예를 들어보자. 책꽂이에 책을 찾는데 아무 정보도 없이 단어만 알고 있다면 도서관 전체를 뒤져야 할 것이다. 하지만 그 단어가 출판사명, 제목, 저자 심지어 출판년도라는 필드 정보와 결합한다면 검색이 매우 손쉬워진다. 
sourcetype은 이렇게 이벤트의 필드를 구분하는 방법을 나열한 정보를 의미한다. 사용자는 본인이 원하는 필드명을 지정해서 sourcetype을 설정할 수 있고 전체 sourcetype에 하나의 이름을 부여할 수 있다.
한 번 저장한 sourcetype은 동일한 로그를 수집할 때 언제든지 가져다 사용할 수 있다. 

그렇다면 아파치 로그에 맞는 sourcetype을 우리가 만들어야 할까? 아니다. 우리는 이런 형식의 sourcetype을 만들 필요는 없다. Splunk 제조사에서 이미 만들어 놓았기 때문이다.
설정 -> 데이터 -> sourcetype에서 사전 정의된 sourcetype을 확인할 수 있다.

하지만 제조사에서 제공한 것만 가지고는 한계가 있다. 우리는 수없이 많은 IT 장비를 운영하고 있고 그런 장비들은 제각각 다른 형식의 이벤트를 생성하기 때문이다. 최근들어 로그는 JSON,keyvalue, csv, tsv, xml등 다양한 형식으로 생성된다.
json과 KV 타입의 로그는 필드와 값이 한 쌍이므로 Splunk는 이를 쉽게 처리할 수 있다. 하지만 csv, tsv 파일 역시 파일의 가장 처음 줄을 헤더로 인식하는 등 쉽게 처리할 수 있다. 하지만 xml 형식의 로그는 태그의 의미 자체를 이해하지 못하기 때문에 본인은 권고하지 않는다.
특정 시스템이 xml 형식으로 로그를 저장하더라도 외부로 로그를 전송할 때 다른 선택사항이 있는지 확인해서 xml을 최대한 사용하지 않는 방향으로 고민해야 한다.
본인의 경험상 이벤트를 sourcetype으로 생성하고 관리하는 것은 csv형식의 로그가 제일 쉽고 편했다. 비록 Splunk가 JSON과 Keyvalue 로그 형식을 자동으로 파싱한다고 하더라도, 필자는 권고하지 않는다.
json은 필드와 값이 ':'을 구분자로 이벤트의 집합을 구성하나. Keyvalue 역시 JSON과 유사하지만 구분자로 '='을 사용한다.

json(Java Script Object Notification) 로그 예제
{"widget": {
    "debug": "on",
    "window": {
        "title": "Sample Konfabulator Widget",
        "name": "main_window",
        "width": 500,
        "height": 500
    },
    "image": { 
        "src": "Images/Sun.png",
        "name": "sun1",
        "hOffset": 250,
        "vOffset": 250,
        "alignment": "center"
    },
    "text": {
        "data": "Click Here",
        "size": 36,
        "style": "bold",
        "name": "text1",
        "hOffset": 250,
        "vOffset": 100,
        "alignment": "center",
        "onMouseUp": "sun1.opacity = (sun1.opacity / 100) * 90;"
    }
}}  


keyvalue 로그 예제
TS=Mon 29 Oct 2001 04:35:27 PM CST,E=28,V=P,R=1,RT=TraceFile,AN=ossyes,AEN=ossyes,A=Trace,P=wr,PRS=/export/home/ossyes,ARS=.sh_history,APID=1235,RPSN=/usr/bin/ksh,
UQ=6

이 형식들의 가장 큰 문제점은 이벤트마다 필드가 저장되어 있다는 점이다. 별거 아닌것 같지만 필드 정보는 한 번 만 필요하다. sourcetype에서 필드 정보를 한 번만 지정하면 모든 이벤트에 필드 정보가 있을 필요가 없다는 말이다. 
하지만 JSON과 Keyvalue 로그 형식에는 이벤트마다 필드 정보가 있기 때문에 저장 공간의 큰 낭비를 가져온다. 아무리 적은 내용이라도 수백만 수천만 건의 로그를 저장하는데 불필요한 저장공간, CPU 능력을 사용하는 것이다. 
참고로 Splunk 라이센스는 일일 최대 인덱싱용량으로 정해진다. 불필요한 필드정보도 인덱싱을 하기 때문에 무의미한 정보에 인덱싱 용량을 소비하는 결과를 초래한다.
그러므로 로그는 최대한 csv, tsv 형식으로 수집할 것을 권고한다. 

이제 신규 sourctype을 만들어보자. 신규 수입하려는 이벤트가아래와 같은 형식이라고 가정하자.

1357016390.095574,43.45.3.9,46137,93.191.121.39,53,udp,dns

위의 이벤트는 시간(epoch 형식),출발지IP, 출발지포트, 목적지IP,목적지포트, 프로토콜, 서비스 형식으로 구성되어 있다. 
sourcetype 형식으로 볼때는 각 필드의 이름을 먼저 지정한다. 필자는 이렇게 지정하겠다. 
time, src_ip,src_port, dst_ip, dst_port,protocol,service

필드 이름을 지을때 고려해야 할 것이 있다. 이 필드명이 향후 검색에서도 사용한다는 점이다. splunk는 사용자가 입력한 검색어를 데이터에서 찾을 때 대소문자를 구별하지 않는다. 
즉, 사용자가 SRC, Src, src를 입력하더라도 모두 동일한 결과값을 반환한다. 하지만 필드명은 대소문자를 엄격히 구분한다. 검색의 편리성을 위해서라도 필드명은 모두 소문자로 작성하는 것을 권고한다.
이제 이 필드명을 가지고 sourcetype을 만들어보자. 

설정->데이터->sourcetype을 선택한 후에 우측상단의 "새로만들기 sourcetype"버튼을 클릭한다. 
항목에 그림과 같이 값을 추가한다.

이름: sourcetype 이름이다. 향후에 계속 사용하므로 내용을 이해하기 쉽게 지정한다.
설명: sourcetype에 대한 부연 설명을 넣는 부분이다. 입력은 선택사항디. 
대상 앱: 이 sourcetype을 사용할 앱을 지정한다. 
범주: sourcetype이 포함되는 범위가 운영체제, 데이터베이스 등인지 등을 설정한다.
인덱스추출 : csv를 선택한다. 우리가 작성할 로그가 csv 형식이기 때문이다. 
타임스탬프 : 이벤트에서 시간 정보는 매우 중요하다. 대부분의 시간정보는 자동으로 추출된다.
필드구분자: csv는 ,를 사용한다. 공백, 파이프(|), 탭 등도 지정할 수 있다. 
따옴표문자: csv 형식에서 필드값 자체에 ,이 포함되는 경우도 있다. 이렇게 되면 sourcetype에서 필드를 제대로 추출하지 못할 수도 있다. 
여기처럼 큰따옴표로 설정하면 큰따옴표로 감싸진 부분을 모두 필드값으로 인식한다. 하나의 문자열을 구성하는 단위라고 보면 된다.
필드이름: 필드 이름에 대한 추출을 명시한다. 줄을 선택하고 필드명이 있는 줄번호를 명시하면 된다. 대부분 csv 파일은 첫 번째 줄에 필드명이 있다.
사용자 정의는 사용자가 필드명을 직접 지정하는 것을 말한다. 예제에서는 사용자 정의를 선택하고 쉼표로 구분된 필드 이름을 넣어 주었다. 
이 필드 이름의 개수와 이벤트에서 얻어지는 필드의 수는 같아야 한다.

값을 입력하고 저장하면 목록에 신규로 추가된 sourcetype이 보인다. 

이러한 일련의 과정이 복잡하게 보일 수 있다. 하지만 Splunk에서 sourcetype없이 검색한다면 검색결가를 얻는데 너무 시간이 많이 걸려서 답답할 것이다. 
sourcetype은 고급 검색을 작성하는데도 중요한 필드 추출을 해주기 때문에 잘 숙지하고 있어야 한다. 
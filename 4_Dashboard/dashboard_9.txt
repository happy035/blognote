어제 제시한 대시보드를 처음 부터 만들어보자. 

대시보드는 세 개의 패널로 구성되어 있다. 상위 패널의 시각화는 지도 시각화를 적용했다. 

지도 시각화 
Splunk에서 지도시각화 방법은 geostats와 geom 두 가지가 있다. 여기에서는 geostats 명령어를 사용하였다.  
위치에 대한 위도/경도 정보를 보유하고 있으면 해당 지역에 개수를 표시할 수 있다.
그러므로 필요한 정보는 지도에 표시 대상 필드, 해당 필드의 위도/경도 정보를 얻어야 한다.
위치 정보를 가진 필드가 어떤 것이 있을까 생각해보자. 우선 제목에 출발지 IP 현황이라는 힌트가 있다. 
우리가 예제로 사용하는 로그는 웹 서버로그 이다. 웹서버는 인터넷에 위치해있고 수많은 사용자들이 서버에 접속한다. 
즉 사용자들이 접속에 사용하는 IP를 이용해서 위치 정보를 추출할 수 있다. Splunk는 기본으로 IP의 위치정보를 연결한 정보를 제공하고 있다.
다시 확인하고 싶다면 대시보드 1편을 참고하자. http://monoris30.blog.me/221330924352

IP 정보를 지도에 표시하려면 먼저 위도 경도 정보를 추출해야 한다. iplocation 명령어를 사용해보자. 

index=book sourcetype="access_combined_wcookie" 
| iplocation clientip | dedup clientip
| table clientip, Country, City, Region, lat, lon 
| where Country!=""

다음과 같은 검색결과를 얻을 수 있다.


검색어에서 사용한 명령어 중에서 dedup가 있다. 이 명령어는 중복값을 제거(deduplicate)하라는 의미이다.
iplocation명령어는 IP 주소를 입력받아서 데이터베이스에서 조회를 하고 국가(Country), 도시(City), 지역(Region), 위도(lat), 경도(lon)정보를 반환한다.
그 결과로 정보에 해당하는 필드가 추가로 생성되고 이를 검색에 사용할 수 있다. 즉, 국가별 IP수를 세려면 다음 검색어를 사용할 수 있다.

index=book sourcetype="access_combined_wcookie" 
| iplocation clientip 
| top showperc=f Country

iplocation 명령어가 익숙하면 이제 지도 시각화를 알아보자. 
1. 대시보드를 생성하고 패널 추가를 선택한다. 
2. 새로만들기에서 Cluster Map을 선택한다. 
3. 시간범위는 전체를 선택하고 검색어 입력창에 다음의 검색어를 입력한다.
 
index=book sourcetype="access_combined_wcookie" 
| where match(status, "$stat_code$") 
| iplocation clientip 
| geostats latfield=lat longfield=lon count by clientip globallimit=50


 4. 대시보드에 추가를 클릭한다.

검색어를 살펴보자. 
1. index와 sourcetype은 데이터를 한정하는 것이다. 이제 이 구문에 익숙할 것이다.
2. 사용자가 선택한 입력에 맞는 데이터를 필터링하는 구문이다. 
3. 사용자 접속 IP의 위치 정보를 추출한다.
4. geostats 명령어를 사용하고 위도와 경도에 들어갈 필드를 다음과 같이 지정한다. latfield=lat longfield=lon. 
 이제 count by clientip 출발지 IP별로 숫자를 센다. 
 마지막의 옵션인  globallimit=50는 전체 IP 목록에서 몇 개를 보여줄지를 정하는 것이다. 이 옵션을 지정하지 않아도 기본값은 10이다.
 너무 많은 IP를 지도에 보여주면 지도 렌더링에 많은 시간이 걸리기 때문에 기본값을 제한하는 것이다. 
 실습에서는 전체 시간을 가지고 하지만 실제 사용할 때는 주기적으로 새로운 데이터를 가져오는 방식으로 조회 IP를 줄여야 한다.
 데이터 수를 고려하지 않고 접속 IP를 모두 보여주려면 globallimit=0 으로 설정하면 된다.

원하는 데이터를 지도위에 매핑시켰다면 좋은 결과를 얻을 수 있다. 공격지IP와 같은 출발지는 국가 정보를 보는 것만으로도 좋은 정보가 될 수 있다.
물론 해당 국가가 모두 공격지는 아니다. 하지만 우리나라 고객을 대상으로 운영하는 홈페이지에 동유럽 국가나 중동 지방에서 접속이 많은 것이 정상이라고 보기는 어렵다. 

두 번째인 아래 왼쪽 대시보드는  URI 현황을 보여주고 있다. 어떤 주소를 사용자들이 많이 요청했는지 알 수 있다.

이 내용은 그렇게 어려운 것은 아니다. URI는 사용자들이 입력한 값까지 보여주는 전체 주소이기 때문에 사용자들이 어느 입력값을 많이 사용하는지를 알 수 있다.
또 하나는 URI 로그에서 JSESSIONID가 보이고 있다는 점이다. 세션ID는 세션당 생기는 것이 원칙이므로 세션 ID 숫자를 세는 것 만으로 유일한 접속자를 구별할 수 있다.
URI는 독자적인 필드가 존재하므로 해당 필드를 사용해서 계산하면 된다.  
목록의 수를 세는 방법은 top과 stats가 존재한다. top은 자동으로 많은 데이터부터 정렬해서 보여준다. 하지만 top은 10개를 보여주는 것이 기본이다. 
그러므로 원하는 목록만큼 데이터를 보여주려면  limit=<정수> 옵션을 사용해서 개수를 지정해야 한다. 0으로 지정하면 전체 데이터를 보여준다.
stats은 기본적으로 모든 데이터를 보여준다. 하지만 stats은 개수를 센 숫자를 정렬하지 않기 때문에 계산 후에 sort 명령어를 이용해서 정렬을 시켜줘야 한다.
그림과 같이 URI 목록의 수를 보여주는 방법은 다음과 같다. 

index=book sourcetype="access_combined_wcookie" 
| where match(status, "$stat_code$") 
| stats count by uri 
| sort - count

stats을 이용해서 숫자를 세는 것은 top 명령어로도 동일하게 구현할 수 있다.

index=book sourcetype="access_combined_wcookie" 
| where match(status, "$stat_code$") 
| top showperc=f limit=0 uri 

앞에서 설명했듯이 top은 큰 개수로 정렬을 하기 때문에 sort를 사용하지 않았다. 
하지만 값이 차지한 비율을 보여주지 않기 위해 showperc=f를 사용했고, 모든 데이터를 나열하기 위해 limit=0 옵션을 주었다. 
두 명령어가 동일한 결과를 반환하지만 정렬까지 완벽하게 일치하지는 않는다. 그 이유는 정렬을 사용하는 필드때문이다. 
stats에서는 개수를 나타내는 count를 기준으로 정렬을 수행한다. 하지만 top은 uri를 기준으로 정렬을 수행한다. 
그러므로 개수가 같을때 나머지 필드의 정렬은 명시되지 않았으므로 다르게 나타날 수 밖에 없다. 
top 명령어를 사용했을때와 동일한 결과를 얻으려면 stats에서 정렬에 사용할 필드를 추가로 지정해야 한다.

index=book sourcetype="access_combined_wcookie" 
| where match(status, "$stat_code$") 
| stats count by uri 
| sort - count uri

이 검색어는 숫자로 정렬하고 다시 uri로 추가 정렬을 한다. 이제 순서까지 일치하는 결과를 얻을 수 있다. 
어느 한쪽의 명령어가 더 낫다고 할 수 없다. 하지만 단순히 목록을 얻으려면 top이 조금 더 수월하다. 
목록이 아닌 각종 계산, 총합, 통계, 분산값 등 데이터를 계산하려면 당연히 stats를 사용하는 것이 낫다.

세 번째 패널을 살펴보자. 아래의 오른쪽 대시보드는 접속 페이지 현황을 볼 수 있다. 접속 페이지란 웹서버에 존재하는 페이지 중 사용자들이 접속한 페이지를 의미한다.
그런데 어떤 페이지를 얼마나 접속했는지는 웹로그에서 바로 찾을 수 없다. 그러면 어떻게 이 패널을 표시할 수 있을까?
다행히 Splunk의 필드 추출기는 페이지를 자동으로 추출하고 있다. 필드 목록에서 file이라는 필드가 그것이다.
그러므로 우리는 이 필드를 사용해서 간단히 목록을 만들 수 있다. 

index=book sourcetype="access_combined_wcookie" 
| where match(status, "$stat_code$") 
| top showperc=f limit=0 file

이 경우는 우리가 원하는 필드가 자동으로 추출되어 있어서 손쉽게 목록을 만들었다. 하지만 원하는 필드가 항상 존재하는 것은 아니다. 
그러면 수동으로 관리자가 원하는 필드를 추출하는 기법을 잘 알고 있어야 한다. Splunk는 기계가 생성한 로그를 주로 분석한다.
기계가 로그를 생성한다는 것은 개발자가 프로그래밍한 범위에서 정확한 규칙을 가지고 로그가 생성된다는 말이다. 
URI에서 file값을 수동으로 추출하는 방법을 알아보자. 

다음은 URI에서 볼 수 있는 로그 형식이다. 

/category.screen?categoryId=NULL&JSESSIONID=SD0SL4FF9ADFF36748
/cart/success.do?JSESSIONID=SD7SL3FF2ADFF29914

원하는 값을 얻으려면 먼저 웹 로그를 이해해야 한다. 웹 로그에서 ?의 의미는 무엇일까? 검색에서 한 번 언급을 했었다. 
?의 의미는 페이지에 입력값을 넘길때 사용하는 특수 구분자이다. 그렇다면 위의 로그들은 어떤 의미일까? 

첫 번째는 category.screen이라는 페이지에 다음과 같은 두 개 입력값을 넘기고 있다.
categoryId=NULL
JSESSIONID=SD0SL4FF9ADFF36748

두 번째 로그는 /cart/디렉토리의 success.do에 한 개의 입력앖을 넘기고 있다.
JSESSIONID=SD7SL3FF2ADFF29914

?은 페이지와 입력값을 구분하고 변수가 한 개이상이면 &로 변수 사이를 구분하고 있다. 
즉 category변수에 NULL값을, JSESSIONID변수는 SD0SL4FF9ADFF36748을 전달한다. 하지만 우리가 원하는 값은 페이지 자체이다. 
그러므로 ?을 구분자로 사용하고 URI를 두개의 문자열로 분할(split)할 수 있다. 그러면 앞의 문자열은 디렉토리와 페이지가 있고 뒤의 문자열에는 입력값이 있게 된다.

/category.screen categoryId=NULL&JSESSIONID=SD0SL4FF9ADFF36748
/cart/success.do JSESSIONID=SD7SL3FF2ADFF29914

우리가 원하는 것은 파일명이다. 파일이 웹서버 루트에 있다면 /으로 시작하고, 다른 디렉토리에 있다면 /cart/와 같이 디렉토리 명이 먼저 나온다.
어떤 파일은 /cart/user/purchase.do와 같이 더 깊은 디렉토리에 있다. 그러면 이렇게 다른 조건에서 항상 파일명을 추출할 수 있을까? 
디렉토리가 여러개라도 파일명은 항상 마지막에 위치한다는 것을 생각해야 한다. 그렇다면 이런 방식으로 접근이 가능하다.

1. uri필드에서 '?'을 기준으로 문자열을 분할한다. 
2. 앞의 문자열을 다시 '/'로 분할한다.
3. '/'로 분할해서 얻은 토큰 목록에서 항상 마지막이 파일명이다.

문자열을 분할하면 분할한 값들은 각각 배결과 같이 인자로 접근하는 토큰목록이 된다. 이해를 돕기 위해 아래 그림을 살펴보자.

처음에는 '?'으로 uri 필드를 분할하고, 분할된 값에서 첫 번째 인자를 다시 '/'로 분할하는 것을 보여준다. 
분할된 토큰은 순차적으로 0, 1 ~ n 으로 인자가 할당된다. C언어의 배열, 파이썬의 리스트 인자와 동일한 방식으로 동작한다.
그렇지만 지금처럼 단순하면 마지막 토큰의 인자번호가 1번이라는 것을 알 수 있지만 가변적이면 어떻게 할까? 
위에서 살펴본 두 로그도 첫 번째는 '/'로 구분되는 인자가 1개뿐이라 0번이 파일명이다. 
그렇지만 두 번째는 '/'로 구분되는 인자가 두개라서 인자번호 1번이 파일명이 된다. 이렇게 가변적이라면 어떻게 해야 할까? 
다행히 인자를 뒤에서부터 세는 방법도 존재한다. 파이썬도 동일한 방식을 사용하는데 -1이 마지막 인자를 지칭한다. -2는 마지막에서 두 번째 인자이다.

이제 이런 원리를 Splunk 검색어로 만들어보자. 

index=book sourcetype="access_combined_wcookie" 
| where match(status, "$stat_code$") 
| eval page = mvindex(split(mvindex(split(uri,"?"),0),"/"),-1)
| top showperc=f page

Splunk 검색은 프로그래밍 언어와 매우 유사하지만 반복문(loop)를 지원하지 않는다. 그러므로 원하는 값을 얻기 위해서는 함수를 중첩해서 사용하거나 변수를 할당하면서 반복적으로 계산해야 한다.
위 검색어는 아래와 같이 작성할 수도 있다. 

| eval page = split(uri,"?")
| eval page = mvindex(page,0)
| eval page = split(page,"/")
| eval page = mvindex(page,-1)

동일한 검색결과를 반환하므로 어느것이 좋다 나쁘다할 것은 아니다. 본인의 취향대로 작성하면 된다. 
5편에 이어서 입력 컨트롤을 더 살펴보자. 

텍스트 입력 컨트롤에 대해서 다시한 번 복습을 해보자. 텍스트 컨트롤은 사용자의 입력을 받는 도구로 가장 많이 사용한다. 
하지만 사용자는 항상 변화무쌍하다. 검색어를 입력할 때 개발자가 애초에 고려한 대로 입력을 하는 경우는 정말 드물다. 
생각보다 사용자들의 컴퓨터에 대한 지식이 그리 높지 않기 때문이다. 그러므로 개발자는 모든 경우의 수를 고려해서 개발해야 한다.
실제 동작 코드보다 에러처리 코드가 더 많다는 것이 그리 놀랍지 않은 이유는 오만가지로 입력하는 사용자를 대응하는 방법이다.

예제로 만들고 있는 대시보드는 HTTP 상태코드의 정보를 계속 보여주고 있다. 상태코드는 세자리 숫자로 구성되어 있으며 값에 따라 코드 정보가 다르다.
익숙한 사용자라면 상태코드를 바로 입력하겠지만 일반 사용자는 그렇지 못하다. 
간단히 말하면 텍스트 컨트롤은 주관식이다. 우리는 주관식보다는 객관식에 익숙해져있다. 그러므로 입력 에시를 보여주면 사용자들에게 편리성을 제공할 수 있다. 
드롭다운과 다중선택은 이 조건을 충족시켜주는 좋은 입력 컨트롤이다. 두 컨트롤의 사용방법은 매우 유사하고 환경 설정도 모두 동일하다. 
유일한 차이점이라면 드롭다운은 목록에서 하나만을 선택할 수 있고, 다중 선택은 한 개 이상을 선택할 수 있다는 것이다.
기존에 있는 텍스트 컨트롤을 드롭다운 컨트롤로 변경하고 환경설정을 해보자. 
1. 대시보드 편집 모드를 연다. 
2. 텍스트 컨트롤의 연필 아이콘을 클릭한다. 
3. 팝업창에서 드롭다운을 선택한다.
4. 기본값과 초기값의 선택 항목 지우기를 클릭해서 값을 초기화한다.
5. 적용을 눌러서 컨트롤 변경을 완료한다. 

여기까지 실행하면 텍스트 컨트롤이 드롭다운 컨트롤로 변경된다. 하지만 드롭다운 컨트롤에 아무런 선택값도 주지 않았기 때문에 선택이 불가능하다. 
이제 사용자들이 선택할 수 있는 값을 입력해보자. 다시 편집모드로 들어가서 연필 아이콘을 클릭해서 컨트롤 설정으로 들어가자. 
오른쪽 옵션창을 스크롤해서 아래로 내리면 텍스트 컨트롤에는 없던 옵션이 보인다. 정적 옵션과 동적 옵션 두 가지인데 각각 살펴보자. 

정적 옵션
정적 옵션은 목록에 사용하는 값을 정적으로 입력해서 목록을 만드는 것이다. 항상 같은 값의 목록이 나타나는 것이다.
이름에는 사용자들에게 보여질 내용을 적고 값은 실제 검색에 사용되는 값을 적는다. 상태코드의 경우 이름과 값이 같을 수 있다. 
항목을 추가하려면 + 새로 추가 링크를 클릭한다. 그림과 같이 입력하고 적용 버튼을 클릭한다. 
드롭다운 컨트롤이 선택이라는 글씨가 보이면서 활성화가 되어 있다. 선택을 하면 방금 입력한 네 가지의 선택사항이 나타난다.
선택이라고 나오는 이유는 초기값을 지정하지 않았기 때문이다. 200을 선택하고 제출을 클릭해보자. 
텍스트 컨트롤에서 200이라고 입력하고 제출버튼을 누른것과 동일한 결과를 보여준다. 
원하는 내용 선택도 훨씬 간단하고 상태코드를 모르는 사용자라도 목록에서 선택할 수 있어 편리한 인터페이스를 제공할 수 있다.

동적 옵션
동적 옵션은 말그대로 동적으로 변하는 것을 의미한다. 정적 옵션에서 지정한 목록은 관리자가 수정하지 않으면 계속 사용한다. 
하지만 상태코드는 서버의 상태에 따라서 그때 그때 다를 수 있다. 또한 표준 HTTP의 모든 상태코드가 우리 서버에 나타난다고 볼 수도 없다. 
나오지도 않을 코드를 목록에 넣어서 사용자가 검색결과를 0으로 받으면 그것만큼 비효율적인 것이 없다. 
동적옵션은 이럴때 매우 강력한 기능을 발휘한다.  즉, 검색 결과를 목록으로 설정하는 것이다.  

콘텐츠 유형에서는 인라인 검색과 보고서를 사용할 수 있다. 필자는 보고서는 거의 사용하지 않고  인라인 검색만을 사용한다. 
여기에서도 인라인 검색을 살펴보자. 인라인 검색에는 Splunk의 검색 문법을 그대로 사용할 수 있다. 상태코드 목록 추출을 위해 다음 검색어를 사용한다.

index=book sourcetype="access_combined_wcookie" 
| dedup status 
| table status

dedup 검색어는 중복값을 제거하는 명령어이다. 모든 이벤트에서 상태값을 추출하면 이벤트 수만큼의 상태코드를 얻을 수 있다. 
우리가 원하는 것은 중복값이 없는 유일한 값들만 추출하는 것이다. 그러므로 상태코드의 중복값을 제거하고 그 목록을 나열하는 검색어이다. 
다른 컨트롤에도 동적옵션이 있다면 반드시 중복을 제거해야 한다. 물론 Splunk는 사용자가 중복을 제거하지 않아도 알아서 제거해주기는 한다. 
그렇더라도 중복값이 발생한다고 컨트롤에 오류메시지를 발생시키기 때문에 사전에 중복을 제거하는 것이 좋다.
시간은 목록을 추출하기 때문에 전체 시간으로 설정하는 것을 권고한다. 
레이블로 사용할 필드와 값으로 사용할 필드는 동적 옵션 사용시 필수이다. 이 부분은 한글 번역의 한계이다. 정적옵션에서는 이름과 값이라는 용어를 사용했다.
여기에서도 레이블이 아니라 이름이라는 용어를 사용했어야 사용자들에게 혼란을 주지 않았을 것이다. 여기는 둘 다 status로 입력한다. 
그 이유는 status 필드의 값이 200이라면 레이블에 사용할 필드에 status의 값인 200이 목록 값으로 보여진다. 값으로 사용할 필드에도 status가 할당되므로 200이 되면서 검색 실행시 200이 사용된다.
적용 버튼을 클릭해서 편집 모드를 빠져나온다.

목록을 펼치면 정적 옵션에서 입력한 값보다 더 많은 값이 목록에 들어있는 것을 볼 수 있다. 
이 값은 최신 상태를 반영하므로 존재하는 상태코드를 알 수 있다.

이처럼 드롭다운은 사용자의 입력을 정형화시켜 발생하는 오류를 사전에 예방하는 효과를 얻을 수 있다. 
필자는 전문 개발자는 아니다. 하지만 사용자 인터페이스를 설계하는 프론트 엔드 기획을 많이 해본 경험에서 다음 결론를 얻을 수 있었다.
프로그램 화면에서 사용자에게 많은 자유도를 부여하는 것이 오히려 프로그램의 안정성을 해칠 수 있다는 것이다.
사용자들이 들으면 기분 나쁘겠지만 개발자의 의도를 잘 이해하고 범위안에서만 사용하는 사용자는 극히 드물다.
특히 입력이 있는 인터페이스가 그런 경향이 더 강한 것 같다.  그러므로 텍스트 입력은 최소화하고 드롭다운, 체크박스, 라디오 등을 적극 사용해야 한다.

다중 선택은 드롭다운과 매우 유사하지만 다중처리를 하는 부분이 초보자에게는 어려울 수 있다. 이 부분은 다음편에 살펴보자.
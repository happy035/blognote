다른 글에서 검색용 샘플데이터를 적재해보았다. 

이제 검색용 샘플 데이터를 이용해서 직접 데이터를 추출해보자. tutorial 데이터에서 www1, www2, www3를 모두 입력하면 다음과 같은 결과를 얻을 수 있다. 

host에는 www1, www2, www3가 보여야 한다. 
source에는 access.log와 secure.log가 보여야 한다.
sourcetype에는 access_combined_wcookie와 linux_secure가 보여야 한다. 

총 6개의 파일을 업로드 했지만 세 개의 호스트에서 두 종류의 파일을 두 가지 형식의 소스타입으로 업로드한 것이다. 
source는 로그 파일의 원본을 의미한다. host, source, sourcetype은 모두 검색에서 필드로 사용될 수 있다. 
즉, host=[호스트이름], source=[source 이름] 등으로 검색이 가능하다. 특정 호스트에서 추출한 로그만 검색 범위로 지정할 수 있다.

http://monoris30.blog.me/221317127486<9 - 데이터 통계>에서 설명한 각종 stats 함수를 실제로 작성해보자. 

index=book sourcetype="access_combined_wcookie" 
| stats sum(bytes), avg(bytes), max(bytes), median(bytes), min(bytes) by clientip

검색시간은 전체 시간으로 설정하고 검색을 실행시켜보자. 

전체 로그에서 바이트의 총합(sum), 평균(avg), 최대값(max), 중앙값(median), 최소값(min)을 clientip별로 계산해서 보여준다. 

=============     평균과 중앙값 차이   ==============
평균과 중앙값을 알아보자. 평균은 개별 항목 값을 모두 더한 총합을 개수로 나누는 것이다. 중앙값은 나열된 데이터에서 중앙에 위치하는 값 자체를 취한다. 중앙값을 구하는 방법은 다음과 같다. 
데이터를 크기순으로 정렬한다. (오름차순이나 내림차순은 상관없다.) 
데이터 개수가 홀수인 경우 데이터 수가 n개라면 (n – n/2)이 중앙값이다. 
데이터 개수가 짝수인 경우 데이터 수가 n개라면 (n/2 번째 값 + (n/2) +1 번째 값)/2이다.
=================================================

다른 함수도 계산해보자. 

index=book source="access.log" 
| stats list(referer_domain), values(referer_domain) by clientip

결과를 보면 list 함수와 values 함수가 어떻게 동작하는지 파악할 수 있다. list 함수는 필드에 있는 모든 값을 목록으로 보여준다. 
values 역시 목록으로 보여주지만 list와 다른 점은 중복값을 제거하고 보여준다는 것이다. 즉, 필드에 있는 고유값을 목록으로 만들어준다. 
values 함수는 해당 필드에 어떠한 값들이 존재하는지 알아볼 때 편리한 함수이다. 


통계 테이블 및 차트 시각화

변환 명령어 및 검색
시각화는 데이터를 추출한 다음에 사용자의 이해를 돕기위해서 데이터를 도식화 하는 것이다. 
그러므로 시각화 이전에 반드시 데이터를 추출하여 통계 테이블로 변환해야 한다. 통계 테이블은 차트와 기타 데이터 시각화 유형에 필요하다. 
대표적으로 사용하는 명령어는 다음과 같다. 

chart: 그림으로 나타낼 데이터 계열을 표시할 수 있는 차트를 생성한다. 차트 생성시 x축에 표시할 필드를 지정할 수 있다.
timechart: "시간에 따른 추세" 보고서를 만드는 데 사용된다. chart명령어가 x축에 필드를 지정하는 것과 달리 timechart는 _time(시간)이 항상 x축이다.

stats 명령어도 통계테이블을 생성하는 명령어이다. 다만 stats는 요약 통계 보고를 생성하는 것이 주 목적이다. 
앞서 살펴본 stats 명령어의 함수 들은 chart와 timechart에서도 동일하게 사용할 수 있다. 

timechart 명령어
timechart 명령어를 실행하면 시간에 따른 통계 테이블이 생성된다. 
이 테이블은 시간필드가  x축 실제 데이터가 y축에 표시되는 차트 시각화 형식으로 나타낼 수 있다. 
timechart 명령어는 시간에 따른 통계의 추세를 표시하기 위해 가장 많이 사용한다. 
Timechart 시각화는  꺾은선형, 영역형 또는 세로막대형 차트로서 많이 나타낸다.

timechart span=[시간범위] 통계함수 [by 필드명]

실제로 데이터를 가지고 입력해보자. 

index=book sourcetype="access_combined_wcookie" 
| timechart span=1d count(clientip) as "Client Count"

span이라는 옵션은 데이터를 지정한 시간 단위로 묶는다는 의미이다. 여기에서는 시간 연산자에 사용하는 용어를 그대로 사용한다. 
1d는 1day라는 의미이다. 이 명령어는 clientip의 갯수를 span=1d하루단위로 묶어서 보여주는 것이다. 
결과는 다음과 같이 나타난다. 

==============
splunk 명령어에서 "|" 명령어 사이를 구분하고 입력과 출력을 명시해주는 연산자다. 그러므로 "|" 단위로 명령어가 새로운 줄로 온다면 사용자는 검색 명령어를 읽기 매우 편할 것이다. 
검색어 시작할 때마다 엔터를 입력할 것인가? 그럴 필요없다. Splunk는 명령어 정렬 기능을 제공한다. 
윈도우는 Ctrl + \, Mac은 command + \을 입력하면 아무리 복잡한 검색어 라도 "|"를 기준으로 정렬한다. 단, 줄의 맨처음만 파이프를 배치한다.
==============

명령어는 시각화를 하지 않았으므로 테이블 형식의 데이터만을 보여준다. 이 데이터를 간단하게 시각화로 변경해보자. 상세내역은 대시보드 제작에서 알아본다. 

시각화 글자를 클릭하고 제일 왼쪽에서 시각화 메뉴를 선택한다. 
timechart 명령어는 시간에 따른 데이터를 보여주기 때문에 Line Chart를 사용해서 시간에 따른 변화를 추적하는데 용이하다.

1. Line Chart를 선택한다. 
2. 형식-> 일반-> 데이터 값 표시 -> 켜기를 선택한다.
3. 형식-> 범례=>범례위치 -> 위를 선택한다. 

이제 일자별 클라이언트 수를 시각화한 결과를 얻었다. 시각화기법은 대시보드 생성에서 더 자세하게 살펴볼 것이다. 

chart 명령어
chart 명령어는 timechart와 유사한 방식으로 동작한다. 
하지만 timechart가 _time 필드를 반드시 X축의 필드값으로 사용하는 것과 달이 chart 명령어는 임의의 필드를 X축으로 사용할 수 있다. 
chart 명령어에서 X축에 사용할 필드는 over 키워드를 사용하여 지정한다. 
웹 로그에서 날짜별 고유 접속 IP수를 얻는 검색어는 다음과 같다.

index=book sourcetype="access_combined_wcookie" 
| chart dc(clientip) as “Unique Count” over date_wday

dc 함수는 중복값을 제거한 유일한 값만을 세서 개수를 반환한다.

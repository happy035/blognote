날짜 계산 관련 Splunk 함수

컴퓨터로 업무를 처리하다보면 날짜 관련 함수를 사용할 경우가 많다. 
모든 이벤트가 시간 정보와 같이 저장되기 때문에 날짜를 처리하는 방법을 잘 알고 있어야 한다. 
예를 들어 특정 이벤트가 주기적으로 발생하고 있는지를 판별하는 방법은 타임스탬프간에 차이를 이용해서 확인할 수 있다. 
특정 이벤트가 발생한 시점이 현재 시간을 기준으로 얼마나 오래되었는지도 중요한 관점이 될 수 있다. 

늘 그렇듯이 Splunk가 제공하는 모든 함수를 사용하는 것은 아니다. 가장 많이 사용하는 몇 가지 함수만 살펴보자. 

now()
이 함수는 아무런 인자를 사용하지 않는다. 그리고 함수가 실행되는 날짜와 시간을 반환한다. 
반환하는 형식은 UNIX 타임이다. 다른 말로는 Epoch 시간이라고도 한다. 
유닉스 타임의 기준시간은 1970년 1월 1일 00:00:00이다. 즉, 기준 시간 이후에 경과한 초를 부호없는 정수로 표시하는 방식이다.
그러므로 사람이 사용하는 일:월:년 시:분:초의 형식과는 다르기 때문에 사용자가 읽을 수 있는 형식으로 변환해줘야 한다. 

relative_time(X,Y)
주어진 시간 X에 Y가 지정한 상대시간을 계산해서 반환한다. Y에 지정하는 방식은 Splunk 시간 지정 연산방식을 따른다. 

... | eval ts=relative_time(now(), "-1d@d")

이제 이 검색어를 이해할 수 있다. now()는 검색어가 실행된 날짜와 시간을 반환한다. 지정된 상대시간은 -1d@d이므로 하루 전날을 얘기하고 @이 포함되므로 가장 낮은 값으로 절사한다. 
즉, 이 검색어의 결과는 검색어를 실행한 날 하루 전의 00:00시를 반환한다. 단, 그림과 같이 UNIX 타임 형식으로 보여진다.

strftime(X,Y)
이 함수는 주어진 UNIX 타임값 X를 Y가 지정하는 형식을 사용해서 문자열로 변경한다. 
시간 형식 변수는 SplunK에서 지정한 방식을 사용한다. 우리는 년-월-일 시:분:초를 많이 사용한다. 하지만 미국은 월-일-년 시:분:초를 주로 사용한다.
전체 시간변수 및 날짜변수는 Splunk 매뉴얼을 살펴보기 바란다. 여기서는 대표적인 것만 알아보자. 
2018-07-28 13:59:57는 다음 시간 변수로 %Y-%m-%d %H:%M:%S 사용할 수 있다. 
%Y : 연도표시 세기가 포함된 네 자리 수 %y는 두의 두자리만 표시한다.
%m : 01~12까지의 월
%d : 01 ~ 31까지의 일

%H: 24시간 표시
%M: 0 ~ 59까지 분
%S: 0 ~ 59까지 초

가장 많이 사용하는 형식을 위해 Splunk는 편리한 시간 형식 변수를 만들었다. 

%F: %Y-%m-%d
%T: %H:%M:%S

즉, %Y-%m-%d %H:%M:%S 형식은 %F %T로 대체해서 사용할 수 있다

strptime(X,Y)
이 함수는 문자열 X가 나타내는 시간을 Y가 지정한 형식을 사용해서 타임스탬프로 파싱한다. 즉 X는 Y형식으로 날짜를 보여주는 문자열이다. 
하지만 문자열은 날짜 계산을 할 수 없기 때문에 타임스탬프 형식으로 변환해야 하는 것이다.


날짜 함수 사용 예시

특정 날짜와 오늘이 몇 일이나 차이가 나는지 계산해보자. 원래는 필드의 값에서 날짜를 추출해야 하지만 여기서는 임의로 날짜를 지정해서 실험한다.
index=*
| eval sp_date="2018-05-29" 
| eval b_date = strptime(sp_date,"%Y-%m-%d") 
| eval now_string = strftime(now(),"%Y-%m-%d") 
| eval now_time = strptime(now_string,"%Y-%m-%d") 
| eval diff_date = round((now_time - b_date)/86400,0) 
| table now_string, sp_date, diff_date 
| head 5

| eval sp_date="2018-05-29"                    # 시험을 위해서 날짜를 5월 29일로 지정한다. 
| eval b_date = strptime(sp_date,"%Y-%m-%d")   # 날짜를 유닉스 타임값으로 변환한다. 
| eval now_time = strftime(now(),"%Y-%m-%d")   # 오늘 날짜를 문자열로 보여주기 위해 넣은 문장이다. 
| eval diff_date = round((now() - b_date)/86400,0) # 두 날의 차이를 계산한다. 
| table now_string, sp_date, diff_date 
| head 5

이 검색어의 결과는 다음과 같다. 

날짜의 차이를 계산하는 식을 조금 더 설명해보자. UNIX 타임은 Epoch 기준에서 경과한 초를 나타낸다. 
결국 최근 날짜에서 이전 날짜를 빼주면 두 날짜의 차이를 구할 수 있다. 86400은 24시간을 초로 환산하면 나오는 숫자이다. 
그러므로 이 식은 두 날짜가 몇 일이나 차이가 나는지를 계산한다. 몇 주가 차이나는지 알고 싶다면 86400*7로 나누면 된다.

필자는 이 식을 티켓 처리시스템에서 많이 사용하고 있다. 모든 티켓에서 생성날짜와 종료날짜를 구한다. 그리고 티켓이 종료되기 까지 평균 소요시간을 구할 수 있다. 
티켓 담당자별로 평균 처리 시간을 구할 수 있고, 유형 별로도 구할 수 있다. 아직 처리가 안된 티켓이 얼마나 오랫동안 진행중인지 파악하는 것도 가능하다.
이런 유형의 검색어를 사용해서 SLA(Service Level Agreement)를 구현할 수도 있다.

오랫만에 Splunk 관련 글을 작성해본다. 매일 매일 한 개의 글을 목표로 하고 있지만 다른 내용의 글도 작성하고 싶었다.
검색어는 오늘로 마치고 이제 경보와 대시보드를 작성할 것이다.
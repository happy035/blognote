8 - 문자열 조작

로그에서 원하는 문자열을 추출하는 연습을 조금 더 해보자. 
다음은 사용자가 접근한 URL 부분의 로그다. 우리는 사용자가 접근한 파일명만을 추출하려고 한다. 
/data/7.5.8231.2252/GoogleToolbarInstaller_updater_signed.exe
사용자가 접근한 파일은 위 로그에서 마지막에 위치한다. 그 앞에는 모두 디렉토리를 의미한다. 
결국 위의 로그는 디렉토리 구분자인 "/"로 구성된 문자열로 볼 수 있다. 
그리고 사용자들이 다운로드 받은 파일은 항상 경로의 제일 마지막에 위치하고 있다. 
이 로그는 "/"로 분리하고 전체 문자열에서 마지막 단어를 추출하면 파일명을 얻을 수 있다. 
이미 우리는 split() 함수와 mvindex()함수를 사용해서 원하는 문자열을 추출하는 것을 연습했다. 
이 두 함수를 이용하여 원하는 필드값은 다음과 같이 추출할 수 있다. 
| eval filename=mvindex(split(uri,"/"),-1)
해당 로그는 uri 필드로 설정되어 있으며, 

1. split(uri,"/") : split함수에서 "/"를 이용하여 전체 로그를 분할한다. 
2. filename=mvindex(split(uri,"/"),-1) : 분할된 문자열은 mvindex()함수의 첫 번째 인자로 입력되고 이중 제일 마지막 문자열을 추출하는 순서인 -1을 입력하여 추출한다. 
3. filename에는 추출한 문자열이 저장된다. 

mvindex()의 두 번째 인자는 문자 배열의 숫자로서 0부터 시작한다. 하지만 -1부터 시작할 수도 있다. 
-1은 배열중에 가장 마지막을 의미한다. -2는 마지막에서 두 번째를 의미한다. 
배열 번호를 앞에서 시작할지 뒤에서 시작할지는 사용자의 몫이다. 
예제 로그에서 이 eval문이 실행되면 filename 변수에는 "GoogleToolbarInstaller_updater_signed.exe" 문자열이 할당된다. 

이렇게 추출하는 필드값은 할당된 로그가 비교적 쉬운 경우이다. 조금 더 복잡한 예제를 살펴보자. . 
/tools/refresh_top.html?category=computer&company=first&cpu=i7
위의 로그를 보면 파일명 뒤에 인자를 입력받고 있다. 이러한 로그를 이해하기 위해서는 웹의 CGI요청 문법을 이해해야 한다. 
원하는 파일명에 "?"이 있는 경우 파일에 인자값을 전달한다고 볼 수 있다. 프로그램과 인자값은 "?"로 구분되고, 인자 값이 여러 개 인 경우  "&"로 구분된다.  
인자들은 “변수=값”으로 구성된다. 안타깝게도 이런 형식의 로그에서 파일명을 한 번에 추출하는 방법은 Splunk에서 지원하지 않는다. 
그러므로 로그를 분할 한 후에 원하는 필드를 추출하는 방법을 여러 번 반복해야 한다. 아쉽게도 Splunk는 일반 프로그래밍 언어의 반복문(loop)을 지원하지 않는다. 이럴때는 우리가 알고 있는 함수를 중첩해서 사용해야 한다.  
| eval filename=mvindex(split(mvindex(split(uri,"?"),0),"/"),-1)
아무리 복잡한 검색어라도 가장 안쪽 함수부터 실행된다.

1. split(uri,"?")는 전체 로그를 "?" 구분자로 분할한다.
2. (mvindex(split(uri,"?"),0)는 "?"로 구분된 배열에서 첫 번째 인자를 취한다. 이 함수가 실행되면 문자열은 "/tools/refresh_top.html"이 된다.
3. split(mvindex(split(uri,"?"),0),"/") 입력받은 문자열을 "/"로 다시 분할한다. 
4. eval filename=mvindex(split(mvindex(split(uri,"?"),0),"/"),-1) "/"로 분할된 문자열에서 마지막 문자열을 filename 변수에 할당한다. 

최종 결과는 filename 변수에 refresh_top.html이 추출되어 저장된다. 

파일명을 추출하는 예제를 실습해보았다. 하지만 실제 환경에서는 입력되는 로그가 항상 일정하지 않다.  
즉, 파일명으로 종료되는 로그가 있기도 하고 입력값이 포함된 로그도 동시에 저장된다. 그렇다면 두 가지 경우를 모두 고려해서 로그를 파싱하는 방법이 필요하다. 
항상 같은 형식으로 로그가 저장되지 않기 때문에 상황에 따라서 로그를 파싱하는 함수가 다르게 사용되어야 하기 때문이다. 앞에서 살펴본 두 가지 경우를 한 번에 처리하는 방법은 없을까? 
이 경우에는 if() 함수를 사용하여 두 가지 경우를 한 번에 처리해보기로 하자.

/edgedl/toolbar/t7/data/7.5.8231.2252/GoogleToolbarInstaller_updater_signed.exe?category=computer&company=first&cpu=i7

첫 번째 로그와 두 번째 로그의 차이점을 기반으로 이 두 로그를 처리하는 검색어 질의를 작성해보자. 
앞서 살펴봤던 두 로그는 CGI 관련 인자의 존재 유무에 따라서 로그를 파싱하는 규칙이 달라져야 함을 알 수 있다. 
그렇다면 CGI 인자가 있는지 없는지를 확인하는데 사용하는 문자열이 있고 없음에 따라서 검색어를 다르게 할 수 있지 않을까?  
웹 프로그래밍에 익숙한 사용자라면 금새 알아차리겠지만 "?" 즉, 물음표가 로그에 있는지 없는지에 따라서 프로그램의 인자가 존재 여부를 확인할 수 있다.

로그에 "?"가 있다면 프로그램에 입력되는 인자가 존재하고 없다면 파일명만 있는 것이다. 앞서 if()함수를 사용하면 두 로그를 하나의 검색질의로 처리할 수 있다고 했다. 
If()함수는 세 개의 인자를 받는 함수로서 첫 번째 인자는 조건을 명시한다. 첫 번째 조건이 맞는 경우 두 번째 인자를 처리하고 맞지 않는 경우 세 번째 인자를 처리한다. 
첫 번째 로그에 ?이 있는 경우를 검사하고 이에 기반해서 문자열 처리를 진행할 수 있다. 특정 문자나 문자열 존재 여부는 like()함수를 사용해서 알아낼 수 있다. 
만일 log에 "?"있다면 인자 처리용 명령어를, 없다면 인자 없이 바로 파일명을 추출하는 검색어를 작성하면 된다. 
filename=if(like(uri,"%?%"), mvindex(split(mvindex(split(uri,"?"),0),"/"),-1), mvindex(split(uri,"/"),-1))
이미 두 로그 형식에 대한 파일명 추출 함수를 작성했으므로 신규 명령문에서도 그대로 사용할 수 있다. 

그러므로 제시된 명령문은 이렇게 실행된다. 
1. like(uri,"%?%") : uri는 로그가 포함된 필드명이다. 로그에 "?"이 존재하는지 검사한다. 
2. mvindex(split(mvindex(split(uri,"?"),0),"/"),-1) : "?"이 존재하는 경우 파일명을 추출하는 명령어이다
3. mvindex(split(uri,"/"),-1) : "?"이 존재하지 않는 경우 파일명을 추출하는 명령어이다. 

이 조건은 if로 묶여서 경우에 따라서 다른 명령어를 사용함으로써 다양한 로그에 대처할 수 있게 해준다. 조건에 2개를 초과하는 경우는 case()함수를 사용해서 할 수 있다. 
물론 if()함수는 case()함수로 대체해서 사용할 수 있다. 
앞서 살펴본 if()함수를 case()로 변환해보는 것도 좋은 연습이 될 수 있다.
